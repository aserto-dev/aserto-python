# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: aserto/authorizer/authorizer/v1/authorizer.proto
# plugin: python-_asertoproto
from dataclasses import dataclass
from typing import Dict, List

import _asertoproto
from _asertoproto.grpc.grpclib_server import ServiceBase
import grpclib


class PathSeparator(_asertoproto.Enum):
    PATH_SEPARATOR_UNKNOWN = 0
    PATH_SEPARATOR_DOT = 1
    PATH_SEPARATOR_SLASH = 2


class TraceLevel(_asertoproto.Enum):
    TRACE_LEVEL_UNKNOWN = 0
    TRACE_LEVEL_OFF = 1
    TRACE_LEVEL_FULL = 2
    TRACE_LEVEL_NOTES = 3
    TRACE_LEVEL_FAILS = 4


@dataclass(eq=False, repr=False)
class DecisionTreeRequest(_asertoproto.Message):
    policy_context: "___api_v1__.PolicyContext" = _asertoproto.message_field(1)
    identity_context: "___api_v1__.IdentityContext" = _asertoproto.message_field(2)
    options: "DecisionTreeOptions" = _asertoproto.message_field(3)
    resource_context: "_asertoproto_lib_google_protobuf.Struct" = (
        _asertoproto.message_field(4)
    )


@dataclass(eq=False, repr=False)
class DecisionTreeOptions(_asertoproto.Message):
    path_separator: "PathSeparator" = _asertoproto.enum_field(1)


@dataclass(eq=False, repr=False)
class DecisionTreeResponse(_asertoproto.Message):
    path_root: str = _asertoproto.string_field(1)
    path: "_asertoproto_lib_google_protobuf.Struct" = _asertoproto.message_field(3)


@dataclass(eq=False, repr=False)
class IsRequest(_asertoproto.Message):
    policy_context: "___api_v1__.PolicyContext" = _asertoproto.message_field(1)
    identity_context: "___api_v1__.IdentityContext" = _asertoproto.message_field(2)
    resource_context: "_asertoproto_lib_google_protobuf.Struct" = (
        _asertoproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class Decision(_asertoproto.Message):
    decision: str = _asertoproto.string_field(1)
    is_: bool = _asertoproto.bool_field(2)


@dataclass(eq=False, repr=False)
class IsResponse(_asertoproto.Message):
    decisions: List["Decision"] = _asertoproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryOptions(_asertoproto.Message):
    metrics: bool = _asertoproto.bool_field(1)
    instrument: bool = _asertoproto.bool_field(2)
    trace: "TraceLevel" = _asertoproto.enum_field(3)
    trace_summary: bool = _asertoproto.bool_field(4)


@dataclass(eq=False, repr=False)
class QueryRequest(_asertoproto.Message):
    identity_context: "___api_v1__.IdentityContext" = _asertoproto.message_field(1)
    query: str = _asertoproto.string_field(2)
    input: str = _asertoproto.string_field(3)
    options: "QueryOptions" = _asertoproto.message_field(4)
    policy_context: "___api_v1__.PolicyContext" = _asertoproto.message_field(5)
    resource_context: "_asertoproto_lib_google_protobuf.Struct" = (
        _asertoproto.message_field(6)
    )


@dataclass(eq=False, repr=False)
class QueryResponse(_asertoproto.Message):
    results: List["_asertoproto_lib_google_protobuf.Struct"] = _asertoproto.message_field(
        1
    )
    metrics: "_asertoproto_lib_google_protobuf.Struct" = _asertoproto.message_field(2)
    trace: List["_asertoproto_lib_google_protobuf.Struct"] = _asertoproto.message_field(3)
    trace_summary: List[str] = _asertoproto.string_field(4)


class AuthorizerStub(_asertoproto.ServiceStub):
    async def decision_tree(
        self,
        *,
        policy_context: "___api_v1__.PolicyContext" = None,
        identity_context: "___api_v1__.IdentityContext" = None,
        options: "DecisionTreeOptions" = None,
        resource_context: "_asertoproto_lib_google_protobuf.Struct" = None,
    ) -> "DecisionTreeResponse":

        request = DecisionTreeRequest()
        if policy_context is not None:
            request.policy_context = policy_context
        if identity_context is not None:
            request.identity_context = identity_context
        if options is not None:
            request.options = options
        if resource_context is not None:
            request.resource_context = resource_context

        return await self._unary_unary(
            "/aserto.authorizer.authorizer.v1.Authorizer/DecisionTree",
            request,
            DecisionTreeResponse,
        )

    async def is_(
        self,
        *,
        policy_context: "___api_v1__.PolicyContext" = None,
        identity_context: "___api_v1__.IdentityContext" = None,
        resource_context: "_asertoproto_lib_google_protobuf.Struct" = None,
    ) -> "IsResponse":

        request = IsRequest()
        if policy_context is not None:
            request.policy_context = policy_context
        if identity_context is not None:
            request.identity_context = identity_context
        if resource_context is not None:
            request.resource_context = resource_context

        return await self._unary_unary(
            "/aserto.authorizer.authorizer.v1.Authorizer/Is", request, IsResponse
        )

    async def query(
        self,
        *,
        identity_context: "___api_v1__.IdentityContext" = None,
        query: str = "",
        input: str = "",
        options: "QueryOptions" = None,
        policy_context: "___api_v1__.PolicyContext" = None,
        resource_context: "_asertoproto_lib_google_protobuf.Struct" = None,
    ) -> "QueryResponse":

        request = QueryRequest()
        if identity_context is not None:
            request.identity_context = identity_context
        request.query = query
        request.input = input
        if options is not None:
            request.options = options
        if policy_context is not None:
            request.policy_context = policy_context
        if resource_context is not None:
            request.resource_context = resource_context

        return await self._unary_unary(
            "/aserto.authorizer.authorizer.v1.Authorizer/Query", request, QueryResponse
        )


class AuthorizerBase(ServiceBase):
    async def decision_tree(
        self,
        policy_context: "___api_v1__.PolicyContext",
        identity_context: "___api_v1__.IdentityContext",
        options: "DecisionTreeOptions",
        resource_context: "_asertoproto_lib_google_protobuf.Struct",
    ) -> "DecisionTreeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_(
        self,
        policy_context: "___api_v1__.PolicyContext",
        identity_context: "___api_v1__.IdentityContext",
        resource_context: "_asertoproto_lib_google_protobuf.Struct",
    ) -> "IsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query(
        self,
        identity_context: "___api_v1__.IdentityContext",
        query: str,
        input: str,
        options: "QueryOptions",
        policy_context: "___api_v1__.PolicyContext",
        resource_context: "_asertoproto_lib_google_protobuf.Struct",
    ) -> "QueryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_decision_tree(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "policy_context": request.policy_context,
            "identity_context": request.identity_context,
            "options": request.options,
            "resource_context": request.resource_context,
        }

        response = await self.decision_tree(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_is_(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "policy_context": request.policy_context,
            "identity_context": request.identity_context,
            "resource_context": request.resource_context,
        }

        response = await self.is_(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_query(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "identity_context": request.identity_context,
            "query": request.query,
            "input": request.input,
            "options": request.options,
            "policy_context": request.policy_context,
            "resource_context": request.resource_context,
        }

        response = await self.query(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/aserto.authorizer.authorizer.v1.Authorizer/DecisionTree": grpclib.const.Handler(
                self.__rpc_decision_tree,
                grpclib.const.Cardinality.UNARY_UNARY,
                DecisionTreeRequest,
                DecisionTreeResponse,
            ),
            "/aserto.authorizer.authorizer.v1.Authorizer/Is": grpclib.const.Handler(
                self.__rpc_is_,
                grpclib.const.Cardinality.UNARY_UNARY,
                IsRequest,
                IsResponse,
            ),
            "/aserto.authorizer.authorizer.v1.Authorizer/Query": grpclib.const.Handler(
                self.__rpc_query,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryRequest,
                QueryResponse,
            ),
        }


from ....api import v1 as ___api_v1__
import _asertoproto.lib.google.protobuf as _asertoproto_lib_google_protobuf; Proto = _asertoproto_lib_google_protobuf
